
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : never : never
};


/**
 * Model User
 */

export type User = {
  id: number
  name: string
  email: string
  company: string
  password: string
}

/**
 * Model UserOfferLibrary
 */

export type UserOfferLibrary = {
  offerId: string
  userId: number
}

/**
 * Model Offer
 */

export type Offer = {
  id: number
  title: string
  company: string | null
  location: string
  type: string | null
  salary: string
  description: string
  how_to_apply: string
  company_url: string | null
  created_at: Date
}

/**
 * Model UserOffer
 */

export type UserOffer = {
  offerId: number
  userId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userOfferLibrary`: Exposes CRUD operations for the **UserOfferLibrary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserOfferLibraries
    * const userOfferLibraries = await prisma.userOfferLibrary.findMany()
    * ```
    */
  get userOfferLibrary(): Prisma.UserOfferLibraryDelegate<GlobalReject>;

  /**
   * `prisma.offer`: Exposes CRUD operations for the **Offer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offers
    * const offers = await prisma.offer.findMany()
    * ```
    */
  get offer(): Prisma.OfferDelegate<GlobalReject>;

  /**
   * `prisma.userOffer`: Exposes CRUD operations for the **UserOffer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserOffers
    * const userOffers = await prisma.userOffer.findMany()
    * ```
    */
  get userOffer(): Prisma.UserOfferDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.17.0
   * Query Engine version: 3c463ebd78b1d21d8fdacdd27899e280cf686223
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    UserOfferLibrary: 'UserOfferLibrary',
    Offer: 'Offer',
    UserOffer: 'UserOffer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    company: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    company: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number | null
    email: number | null
    company: number | null
    password: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    company?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    company?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    company?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    company?: boolean
    password?: boolean
    UserOffer?: boolean | UserOfferFindManyArgs
    UserOfferLibrary?: boolean | UserOfferLibraryFindManyArgs
  }

  export type UserInclude = {
    UserOffer?: boolean | UserOfferFindManyArgs
    UserOfferLibrary?: boolean | UserOfferLibraryFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'UserOffer'
        ? Array < UserOfferGetPayload<S['include'][P]>>  :
        P extends 'UserOfferLibrary'
        ? Array < UserOfferLibraryGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'UserOffer'
        ? Array < UserOfferGetPayload<S['select'][P]>>  :
        P extends 'UserOfferLibrary'
        ? Array < UserOfferLibraryGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    UserOffer<T extends UserOfferFindManyArgs = {}>(args?: Subset<T, UserOfferFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserOffer>>, PrismaPromise<Array<UserOfferGetPayload<T>>>>;

    UserOfferLibrary<T extends UserOfferLibraryFindManyArgs = {}>(args?: Subset<T, UserOfferLibraryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserOfferLibrary>>, PrismaPromise<Array<UserOfferLibraryGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserUncheckedCreateInput, UserCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUncheckedUpdateInput, UserUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUncheckedUpdateManyInput, UserUpdateManyMutationInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserUncheckedCreateInput, UserCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUncheckedUpdateInput, UserUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserOfferLibrary
   */


  export type AggregateUserOfferLibrary = {
    count: UserOfferLibraryCountAggregateOutputType | null
    avg: UserOfferLibraryAvgAggregateOutputType | null
    sum: UserOfferLibrarySumAggregateOutputType | null
    min: UserOfferLibraryMinAggregateOutputType | null
    max: UserOfferLibraryMaxAggregateOutputType | null
  }

  export type UserOfferLibraryAvgAggregateOutputType = {
    userId: number
  }

  export type UserOfferLibrarySumAggregateOutputType = {
    userId: number
  }

  export type UserOfferLibraryMinAggregateOutputType = {
    offerId: string | null
    userId: number
  }

  export type UserOfferLibraryMaxAggregateOutputType = {
    offerId: string | null
    userId: number
  }

  export type UserOfferLibraryCountAggregateOutputType = {
    offerId: number | null
    userId: number
    _all: number
  }


  export type UserOfferLibraryAvgAggregateInputType = {
    userId?: true
  }

  export type UserOfferLibrarySumAggregateInputType = {
    userId?: true
  }

  export type UserOfferLibraryMinAggregateInputType = {
    offerId?: true
    userId?: true
  }

  export type UserOfferLibraryMaxAggregateInputType = {
    offerId?: true
    userId?: true
  }

  export type UserOfferLibraryCountAggregateInputType = {
    offerId?: true
    userId?: true
    _all?: true
  }

  export type UserOfferLibraryAggregateArgs = {
    /**
     * Filter which UserOfferLibrary to aggregate.
    **/
    where?: UserOfferLibraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOfferLibraries to fetch.
    **/
    orderBy?: Enumerable<UserOfferLibraryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserOfferLibraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOfferLibraries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOfferLibraries.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserOfferLibraries
    **/
    count?: true | UserOfferLibraryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserOfferLibraryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserOfferLibrarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserOfferLibraryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserOfferLibraryMaxAggregateInputType
  }

  export type GetUserOfferLibraryAggregateType<T extends UserOfferLibraryAggregateArgs> = {
    [P in keyof T & keyof AggregateUserOfferLibrary]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserOfferLibrary[P]>
      : GetScalarType<T[P], AggregateUserOfferLibrary[P]>
  }



  export type UserOfferLibrarySelect = {
    offerId?: boolean
    userId?: boolean
    User?: boolean | UserArgs
  }

  export type UserOfferLibraryInclude = {
    User?: boolean | UserArgs
  }

  export type UserOfferLibraryGetPayload<
    S extends boolean | null | undefined | UserOfferLibraryArgs,
    U = keyof S
      > = S extends true
        ? UserOfferLibrary
    : S extends undefined
    ? never
    : S extends UserOfferLibraryArgs | UserOfferLibraryFindManyArgs
    ?'include' extends U
    ? UserOfferLibrary  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserOfferLibrary ?UserOfferLibrary [P]
  : 
          P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : UserOfferLibrary
  : UserOfferLibrary


  type UserOfferLibraryCountArgs = Merge<
    Omit<UserOfferLibraryFindManyArgs, 'select' | 'include'> & {
      select?: UserOfferLibraryCountAggregateInputType | true
    }
  >

  export interface UserOfferLibraryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserOfferLibrary that matches the filter.
     * @param {UserOfferLibraryFindUniqueArgs} args - Arguments to find a UserOfferLibrary
     * @example
     * // Get one UserOfferLibrary
     * const userOfferLibrary = await prisma.userOfferLibrary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserOfferLibraryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserOfferLibraryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserOfferLibrary'> extends True ? CheckSelect<T, Prisma__UserOfferLibraryClient<UserOfferLibrary>, Prisma__UserOfferLibraryClient<UserOfferLibraryGetPayload<T>>> : CheckSelect<T, Prisma__UserOfferLibraryClient<UserOfferLibrary | null >, Prisma__UserOfferLibraryClient<UserOfferLibraryGetPayload<T> | null >>

    /**
     * Find the first UserOfferLibrary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferLibraryFindFirstArgs} args - Arguments to find a UserOfferLibrary
     * @example
     * // Get one UserOfferLibrary
     * const userOfferLibrary = await prisma.userOfferLibrary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserOfferLibraryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserOfferLibraryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserOfferLibrary'> extends True ? CheckSelect<T, Prisma__UserOfferLibraryClient<UserOfferLibrary>, Prisma__UserOfferLibraryClient<UserOfferLibraryGetPayload<T>>> : CheckSelect<T, Prisma__UserOfferLibraryClient<UserOfferLibrary | null >, Prisma__UserOfferLibraryClient<UserOfferLibraryGetPayload<T> | null >>

    /**
     * Find zero or more UserOfferLibraries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferLibraryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserOfferLibraries
     * const userOfferLibraries = await prisma.userOfferLibrary.findMany()
     * 
     * // Get first 10 UserOfferLibraries
     * const userOfferLibraries = await prisma.userOfferLibrary.findMany({ take: 10 })
     * 
     * // Only select the `offerId`
     * const userOfferLibraryWithOfferIdOnly = await prisma.userOfferLibrary.findMany({ select: { offerId: true } })
     * 
    **/
    findMany<T extends UserOfferLibraryFindManyArgs>(
      args?: SelectSubset<T, UserOfferLibraryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserOfferLibrary>>, PrismaPromise<Array<UserOfferLibraryGetPayload<T>>>>

    /**
     * Create a UserOfferLibrary.
     * @param {UserOfferLibraryCreateArgs} args - Arguments to create a UserOfferLibrary.
     * @example
     * // Create one UserOfferLibrary
     * const UserOfferLibrary = await prisma.userOfferLibrary.create({
     *   data: {
     *     // ... data to create a UserOfferLibrary
     *   }
     * })
     * 
    **/
    create<T extends UserOfferLibraryCreateArgs>(
      args: SelectSubset<T, UserOfferLibraryCreateArgs>
    ): CheckSelect<T, Prisma__UserOfferLibraryClient<UserOfferLibrary>, Prisma__UserOfferLibraryClient<UserOfferLibraryGetPayload<T>>>

    /**
     * Delete a UserOfferLibrary.
     * @param {UserOfferLibraryDeleteArgs} args - Arguments to delete one UserOfferLibrary.
     * @example
     * // Delete one UserOfferLibrary
     * const UserOfferLibrary = await prisma.userOfferLibrary.delete({
     *   where: {
     *     // ... filter to delete one UserOfferLibrary
     *   }
     * })
     * 
    **/
    delete<T extends UserOfferLibraryDeleteArgs>(
      args: SelectSubset<T, UserOfferLibraryDeleteArgs>
    ): CheckSelect<T, Prisma__UserOfferLibraryClient<UserOfferLibrary>, Prisma__UserOfferLibraryClient<UserOfferLibraryGetPayload<T>>>

    /**
     * Update one UserOfferLibrary.
     * @param {UserOfferLibraryUpdateArgs} args - Arguments to update one UserOfferLibrary.
     * @example
     * // Update one UserOfferLibrary
     * const userOfferLibrary = await prisma.userOfferLibrary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserOfferLibraryUpdateArgs>(
      args: SelectSubset<T, UserOfferLibraryUpdateArgs>
    ): CheckSelect<T, Prisma__UserOfferLibraryClient<UserOfferLibrary>, Prisma__UserOfferLibraryClient<UserOfferLibraryGetPayload<T>>>

    /**
     * Delete zero or more UserOfferLibraries.
     * @param {UserOfferLibraryDeleteManyArgs} args - Arguments to filter UserOfferLibraries to delete.
     * @example
     * // Delete a few UserOfferLibraries
     * const { count } = await prisma.userOfferLibrary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserOfferLibraryDeleteManyArgs>(
      args?: SelectSubset<T, UserOfferLibraryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserOfferLibraries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferLibraryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserOfferLibraries
     * const userOfferLibrary = await prisma.userOfferLibrary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserOfferLibraryUpdateManyArgs>(
      args: SelectSubset<T, UserOfferLibraryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserOfferLibrary.
     * @param {UserOfferLibraryUpsertArgs} args - Arguments to update or create a UserOfferLibrary.
     * @example
     * // Update or create a UserOfferLibrary
     * const userOfferLibrary = await prisma.userOfferLibrary.upsert({
     *   create: {
     *     // ... data to create a UserOfferLibrary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserOfferLibrary we want to update
     *   }
     * })
    **/
    upsert<T extends UserOfferLibraryUpsertArgs>(
      args: SelectSubset<T, UserOfferLibraryUpsertArgs>
    ): CheckSelect<T, Prisma__UserOfferLibraryClient<UserOfferLibrary>, Prisma__UserOfferLibraryClient<UserOfferLibraryGetPayload<T>>>

    /**
     * Count the number of UserOfferLibraries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferLibraryCountArgs} args - Arguments to filter UserOfferLibraries to count.
     * @example
     * // Count the number of UserOfferLibraries
     * const count = await prisma.userOfferLibrary.count({
     *   where: {
     *     // ... the filter for the UserOfferLibraries we want to count
     *   }
     * })
    **/
    count<T extends UserOfferLibraryCountArgs>(
      args?: Subset<T, UserOfferLibraryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserOfferLibraryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserOfferLibrary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferLibraryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserOfferLibraryAggregateArgs>(args: Subset<T, UserOfferLibraryAggregateArgs>): PrismaPromise<GetUserOfferLibraryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for UserOfferLibrary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserOfferLibraryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserOfferLibrary findUnique
   */
  export type UserOfferLibraryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserOfferLibrary
    **/
    select?: UserOfferLibrarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferLibraryInclude | null
    /**
     * Throw an Error if a UserOfferLibrary can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserOfferLibrary to fetch.
    **/
    where: UserOfferLibraryWhereUniqueInput
  }


  /**
   * UserOfferLibrary findFirst
   */
  export type UserOfferLibraryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserOfferLibrary
    **/
    select?: UserOfferLibrarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferLibraryInclude | null
    /**
     * Throw an Error if a UserOfferLibrary can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserOfferLibrary to fetch.
    **/
    where?: UserOfferLibraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOfferLibraries to fetch.
    **/
    orderBy?: Enumerable<UserOfferLibraryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserOfferLibraries.
    **/
    cursor?: UserOfferLibraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOfferLibraries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOfferLibraries.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserOfferLibraries.
    **/
    distinct?: Enumerable<UserOfferLibraryScalarFieldEnum>
  }


  /**
   * UserOfferLibrary findMany
   */
  export type UserOfferLibraryFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserOfferLibrary
    **/
    select?: UserOfferLibrarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferLibraryInclude | null
    /**
     * Filter, which UserOfferLibraries to fetch.
    **/
    where?: UserOfferLibraryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOfferLibraries to fetch.
    **/
    orderBy?: Enumerable<UserOfferLibraryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserOfferLibraries.
    **/
    cursor?: UserOfferLibraryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOfferLibraries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOfferLibraries.
    **/
    skip?: number
    distinct?: Enumerable<UserOfferLibraryScalarFieldEnum>
  }


  /**
   * UserOfferLibrary create
   */
  export type UserOfferLibraryCreateArgs = {
    /**
     * Select specific fields to fetch from the UserOfferLibrary
    **/
    select?: UserOfferLibrarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferLibraryInclude | null
    /**
     * The data needed to create a UserOfferLibrary.
    **/
    data: XOR<UserOfferLibraryUncheckedCreateInput, UserOfferLibraryCreateInput>
  }


  /**
   * UserOfferLibrary update
   */
  export type UserOfferLibraryUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserOfferLibrary
    **/
    select?: UserOfferLibrarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferLibraryInclude | null
    /**
     * The data needed to update a UserOfferLibrary.
    **/
    data: XOR<UserOfferLibraryUncheckedUpdateInput, UserOfferLibraryUpdateInput>
    /**
     * Choose, which UserOfferLibrary to update.
    **/
    where: UserOfferLibraryWhereUniqueInput
  }


  /**
   * UserOfferLibrary updateMany
   */
  export type UserOfferLibraryUpdateManyArgs = {
    data: XOR<UserOfferLibraryUncheckedUpdateManyInput, UserOfferLibraryUpdateManyMutationInput>
    where?: UserOfferLibraryWhereInput
  }


  /**
   * UserOfferLibrary upsert
   */
  export type UserOfferLibraryUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserOfferLibrary
    **/
    select?: UserOfferLibrarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferLibraryInclude | null
    /**
     * The filter to search for the UserOfferLibrary to update in case it exists.
    **/
    where: UserOfferLibraryWhereUniqueInput
    /**
     * In case the UserOfferLibrary found by the `where` argument doesn't exist, create a new UserOfferLibrary with this data.
    **/
    create: XOR<UserOfferLibraryUncheckedCreateInput, UserOfferLibraryCreateInput>
    /**
     * In case the UserOfferLibrary was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserOfferLibraryUncheckedUpdateInput, UserOfferLibraryUpdateInput>
  }


  /**
   * UserOfferLibrary delete
   */
  export type UserOfferLibraryDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserOfferLibrary
    **/
    select?: UserOfferLibrarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferLibraryInclude | null
    /**
     * Filter which UserOfferLibrary to delete.
    **/
    where: UserOfferLibraryWhereUniqueInput
  }


  /**
   * UserOfferLibrary deleteMany
   */
  export type UserOfferLibraryDeleteManyArgs = {
    where?: UserOfferLibraryWhereInput
  }


  /**
   * UserOfferLibrary without action
   */
  export type UserOfferLibraryArgs = {
    /**
     * Select specific fields to fetch from the UserOfferLibrary
    **/
    select?: UserOfferLibrarySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferLibraryInclude | null
  }



  /**
   * Model Offer
   */


  export type AggregateOffer = {
    count: OfferCountAggregateOutputType | null
    avg: OfferAvgAggregateOutputType | null
    sum: OfferSumAggregateOutputType | null
    min: OfferMinAggregateOutputType | null
    max: OfferMaxAggregateOutputType | null
  }

  export type OfferAvgAggregateOutputType = {
    id: number
  }

  export type OfferSumAggregateOutputType = {
    id: number
  }

  export type OfferMinAggregateOutputType = {
    id: number
    title: string | null
    company: string | null
    location: string | null
    type: string | null
    salary: string | null
    description: string | null
    how_to_apply: string | null
    company_url: string | null
    created_at: Date | null
  }

  export type OfferMaxAggregateOutputType = {
    id: number
    title: string | null
    company: string | null
    location: string | null
    type: string | null
    salary: string | null
    description: string | null
    how_to_apply: string | null
    company_url: string | null
    created_at: Date | null
  }

  export type OfferCountAggregateOutputType = {
    id: number
    title: number | null
    company: number | null
    location: number | null
    type: number | null
    salary: number | null
    description: number | null
    how_to_apply: number | null
    company_url: number | null
    created_at: number | null
    _all: number
  }


  export type OfferAvgAggregateInputType = {
    id?: true
  }

  export type OfferSumAggregateInputType = {
    id?: true
  }

  export type OfferMinAggregateInputType = {
    id?: true
    title?: true
    company?: true
    location?: true
    type?: true
    salary?: true
    description?: true
    how_to_apply?: true
    company_url?: true
    created_at?: true
  }

  export type OfferMaxAggregateInputType = {
    id?: true
    title?: true
    company?: true
    location?: true
    type?: true
    salary?: true
    description?: true
    how_to_apply?: true
    company_url?: true
    created_at?: true
  }

  export type OfferCountAggregateInputType = {
    id?: true
    title?: true
    company?: true
    location?: true
    type?: true
    salary?: true
    description?: true
    how_to_apply?: true
    company_url?: true
    created_at?: true
    _all?: true
  }

  export type OfferAggregateArgs = {
    /**
     * Filter which Offer to aggregate.
    **/
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
    **/
    orderBy?: Enumerable<OfferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Offers
    **/
    count?: true | OfferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: OfferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: OfferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: OfferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: OfferMaxAggregateInputType
  }

  export type GetOfferAggregateType<T extends OfferAggregateArgs> = {
    [P in keyof T & keyof AggregateOffer]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffer[P]>
      : GetScalarType<T[P], AggregateOffer[P]>
  }



  export type OfferSelect = {
    id?: boolean
    title?: boolean
    company?: boolean
    location?: boolean
    type?: boolean
    salary?: boolean
    description?: boolean
    how_to_apply?: boolean
    company_url?: boolean
    created_at?: boolean
    UserOffer?: boolean | UserOfferFindManyArgs
  }

  export type OfferInclude = {
    UserOffer?: boolean | UserOfferFindManyArgs
  }

  export type OfferGetPayload<
    S extends boolean | null | undefined | OfferArgs,
    U = keyof S
      > = S extends true
        ? Offer
    : S extends undefined
    ? never
    : S extends OfferArgs | OfferFindManyArgs
    ?'include' extends U
    ? Offer  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'UserOffer'
        ? Array < UserOfferGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Offer ?Offer [P]
  : 
          P extends 'UserOffer'
        ? Array < UserOfferGetPayload<S['select'][P]>>  : never
  } 
    : Offer
  : Offer


  type OfferCountArgs = Merge<
    Omit<OfferFindManyArgs, 'select' | 'include'> & {
      select?: OfferCountAggregateInputType | true
    }
  >

  export interface OfferDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Offer that matches the filter.
     * @param {OfferFindUniqueArgs} args - Arguments to find a Offer
     * @example
     * // Get one Offer
     * const offer = await prisma.offer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OfferFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OfferFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Offer'> extends True ? CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>> : CheckSelect<T, Prisma__OfferClient<Offer | null >, Prisma__OfferClient<OfferGetPayload<T> | null >>

    /**
     * Find the first Offer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferFindFirstArgs} args - Arguments to find a Offer
     * @example
     * // Get one Offer
     * const offer = await prisma.offer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OfferFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OfferFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Offer'> extends True ? CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>> : CheckSelect<T, Prisma__OfferClient<Offer | null >, Prisma__OfferClient<OfferGetPayload<T> | null >>

    /**
     * Find zero or more Offers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offers
     * const offers = await prisma.offer.findMany()
     * 
     * // Get first 10 Offers
     * const offers = await prisma.offer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const offerWithIdOnly = await prisma.offer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OfferFindManyArgs>(
      args?: SelectSubset<T, OfferFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Offer>>, PrismaPromise<Array<OfferGetPayload<T>>>>

    /**
     * Create a Offer.
     * @param {OfferCreateArgs} args - Arguments to create a Offer.
     * @example
     * // Create one Offer
     * const Offer = await prisma.offer.create({
     *   data: {
     *     // ... data to create a Offer
     *   }
     * })
     * 
    **/
    create<T extends OfferCreateArgs>(
      args: SelectSubset<T, OfferCreateArgs>
    ): CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>>

    /**
     * Delete a Offer.
     * @param {OfferDeleteArgs} args - Arguments to delete one Offer.
     * @example
     * // Delete one Offer
     * const Offer = await prisma.offer.delete({
     *   where: {
     *     // ... filter to delete one Offer
     *   }
     * })
     * 
    **/
    delete<T extends OfferDeleteArgs>(
      args: SelectSubset<T, OfferDeleteArgs>
    ): CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>>

    /**
     * Update one Offer.
     * @param {OfferUpdateArgs} args - Arguments to update one Offer.
     * @example
     * // Update one Offer
     * const offer = await prisma.offer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OfferUpdateArgs>(
      args: SelectSubset<T, OfferUpdateArgs>
    ): CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>>

    /**
     * Delete zero or more Offers.
     * @param {OfferDeleteManyArgs} args - Arguments to filter Offers to delete.
     * @example
     * // Delete a few Offers
     * const { count } = await prisma.offer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OfferDeleteManyArgs>(
      args?: SelectSubset<T, OfferDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offers
     * const offer = await prisma.offer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OfferUpdateManyArgs>(
      args: SelectSubset<T, OfferUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Offer.
     * @param {OfferUpsertArgs} args - Arguments to update or create a Offer.
     * @example
     * // Update or create a Offer
     * const offer = await prisma.offer.upsert({
     *   create: {
     *     // ... data to create a Offer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offer we want to update
     *   }
     * })
    **/
    upsert<T extends OfferUpsertArgs>(
      args: SelectSubset<T, OfferUpsertArgs>
    ): CheckSelect<T, Prisma__OfferClient<Offer>, Prisma__OfferClient<OfferGetPayload<T>>>

    /**
     * Count the number of Offers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferCountArgs} args - Arguments to filter Offers to count.
     * @example
     * // Count the number of Offers
     * const count = await prisma.offer.count({
     *   where: {
     *     // ... the filter for the Offers we want to count
     *   }
     * })
    **/
    count<T extends OfferCountArgs>(
      args?: Subset<T, OfferCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfferAggregateArgs>(args: Subset<T, OfferAggregateArgs>): PrismaPromise<GetOfferAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Offer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OfferClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    UserOffer<T extends UserOfferFindManyArgs = {}>(args?: Subset<T, UserOfferFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserOffer>>, PrismaPromise<Array<UserOfferGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Offer findUnique
   */
  export type OfferFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Offer
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OfferInclude | null
    /**
     * Throw an Error if a Offer can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Offer to fetch.
    **/
    where: OfferWhereUniqueInput
  }


  /**
   * Offer findFirst
   */
  export type OfferFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Offer
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OfferInclude | null
    /**
     * Throw an Error if a Offer can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Offer to fetch.
    **/
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
    **/
    orderBy?: Enumerable<OfferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offers.
    **/
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offers.
    **/
    distinct?: Enumerable<OfferScalarFieldEnum>
  }


  /**
   * Offer findMany
   */
  export type OfferFindManyArgs = {
    /**
     * Select specific fields to fetch from the Offer
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OfferInclude | null
    /**
     * Filter, which Offers to fetch.
    **/
    where?: OfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offers to fetch.
    **/
    orderBy?: Enumerable<OfferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Offers.
    **/
    cursor?: OfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offers.
    **/
    skip?: number
    distinct?: Enumerable<OfferScalarFieldEnum>
  }


  /**
   * Offer create
   */
  export type OfferCreateArgs = {
    /**
     * Select specific fields to fetch from the Offer
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OfferInclude | null
    /**
     * The data needed to create a Offer.
    **/
    data: XOR<OfferUncheckedCreateInput, OfferCreateInput>
  }


  /**
   * Offer update
   */
  export type OfferUpdateArgs = {
    /**
     * Select specific fields to fetch from the Offer
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OfferInclude | null
    /**
     * The data needed to update a Offer.
    **/
    data: XOR<OfferUncheckedUpdateInput, OfferUpdateInput>
    /**
     * Choose, which Offer to update.
    **/
    where: OfferWhereUniqueInput
  }


  /**
   * Offer updateMany
   */
  export type OfferUpdateManyArgs = {
    data: XOR<OfferUncheckedUpdateManyInput, OfferUpdateManyMutationInput>
    where?: OfferWhereInput
  }


  /**
   * Offer upsert
   */
  export type OfferUpsertArgs = {
    /**
     * Select specific fields to fetch from the Offer
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OfferInclude | null
    /**
     * The filter to search for the Offer to update in case it exists.
    **/
    where: OfferWhereUniqueInput
    /**
     * In case the Offer found by the `where` argument doesn't exist, create a new Offer with this data.
    **/
    create: XOR<OfferUncheckedCreateInput, OfferCreateInput>
    /**
     * In case the Offer was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<OfferUncheckedUpdateInput, OfferUpdateInput>
  }


  /**
   * Offer delete
   */
  export type OfferDeleteArgs = {
    /**
     * Select specific fields to fetch from the Offer
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OfferInclude | null
    /**
     * Filter which Offer to delete.
    **/
    where: OfferWhereUniqueInput
  }


  /**
   * Offer deleteMany
   */
  export type OfferDeleteManyArgs = {
    where?: OfferWhereInput
  }


  /**
   * Offer without action
   */
  export type OfferArgs = {
    /**
     * Select specific fields to fetch from the Offer
    **/
    select?: OfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OfferInclude | null
  }



  /**
   * Model UserOffer
   */


  export type AggregateUserOffer = {
    count: UserOfferCountAggregateOutputType | null
    avg: UserOfferAvgAggregateOutputType | null
    sum: UserOfferSumAggregateOutputType | null
    min: UserOfferMinAggregateOutputType | null
    max: UserOfferMaxAggregateOutputType | null
  }

  export type UserOfferAvgAggregateOutputType = {
    offerId: number
    userId: number
  }

  export type UserOfferSumAggregateOutputType = {
    offerId: number
    userId: number
  }

  export type UserOfferMinAggregateOutputType = {
    offerId: number
    userId: number
  }

  export type UserOfferMaxAggregateOutputType = {
    offerId: number
    userId: number
  }

  export type UserOfferCountAggregateOutputType = {
    offerId: number
    userId: number
    _all: number
  }


  export type UserOfferAvgAggregateInputType = {
    offerId?: true
    userId?: true
  }

  export type UserOfferSumAggregateInputType = {
    offerId?: true
    userId?: true
  }

  export type UserOfferMinAggregateInputType = {
    offerId?: true
    userId?: true
  }

  export type UserOfferMaxAggregateInputType = {
    offerId?: true
    userId?: true
  }

  export type UserOfferCountAggregateInputType = {
    offerId?: true
    userId?: true
    _all?: true
  }

  export type UserOfferAggregateArgs = {
    /**
     * Filter which UserOffer to aggregate.
    **/
    where?: UserOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOffers to fetch.
    **/
    orderBy?: Enumerable<UserOfferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOffers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOffers.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserOffers
    **/
    count?: true | UserOfferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserOfferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserOfferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserOfferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserOfferMaxAggregateInputType
  }

  export type GetUserOfferAggregateType<T extends UserOfferAggregateArgs> = {
    [P in keyof T & keyof AggregateUserOffer]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserOffer[P]>
      : GetScalarType<T[P], AggregateUserOffer[P]>
  }



  export type UserOfferSelect = {
    offerId?: boolean
    userId?: boolean
    Offer?: boolean | OfferArgs
    User?: boolean | UserArgs
  }

  export type UserOfferInclude = {
    Offer?: boolean | OfferArgs
    User?: boolean | UserArgs
  }

  export type UserOfferGetPayload<
    S extends boolean | null | undefined | UserOfferArgs,
    U = keyof S
      > = S extends true
        ? UserOffer
    : S extends undefined
    ? never
    : S extends UserOfferArgs | UserOfferFindManyArgs
    ?'include' extends U
    ? UserOffer  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Offer'
        ? OfferGetPayload<S['include'][P]> :
        P extends 'User'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserOffer ?UserOffer [P]
  : 
          P extends 'Offer'
        ? OfferGetPayload<S['select'][P]> :
        P extends 'User'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : UserOffer
  : UserOffer


  type UserOfferCountArgs = Merge<
    Omit<UserOfferFindManyArgs, 'select' | 'include'> & {
      select?: UserOfferCountAggregateInputType | true
    }
  >

  export interface UserOfferDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserOffer that matches the filter.
     * @param {UserOfferFindUniqueArgs} args - Arguments to find a UserOffer
     * @example
     * // Get one UserOffer
     * const userOffer = await prisma.userOffer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserOfferFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserOfferFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserOffer'> extends True ? CheckSelect<T, Prisma__UserOfferClient<UserOffer>, Prisma__UserOfferClient<UserOfferGetPayload<T>>> : CheckSelect<T, Prisma__UserOfferClient<UserOffer | null >, Prisma__UserOfferClient<UserOfferGetPayload<T> | null >>

    /**
     * Find the first UserOffer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferFindFirstArgs} args - Arguments to find a UserOffer
     * @example
     * // Get one UserOffer
     * const userOffer = await prisma.userOffer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserOfferFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserOfferFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserOffer'> extends True ? CheckSelect<T, Prisma__UserOfferClient<UserOffer>, Prisma__UserOfferClient<UserOfferGetPayload<T>>> : CheckSelect<T, Prisma__UserOfferClient<UserOffer | null >, Prisma__UserOfferClient<UserOfferGetPayload<T> | null >>

    /**
     * Find zero or more UserOffers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserOffers
     * const userOffers = await prisma.userOffer.findMany()
     * 
     * // Get first 10 UserOffers
     * const userOffers = await prisma.userOffer.findMany({ take: 10 })
     * 
     * // Only select the `offerId`
     * const userOfferWithOfferIdOnly = await prisma.userOffer.findMany({ select: { offerId: true } })
     * 
    **/
    findMany<T extends UserOfferFindManyArgs>(
      args?: SelectSubset<T, UserOfferFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserOffer>>, PrismaPromise<Array<UserOfferGetPayload<T>>>>

    /**
     * Create a UserOffer.
     * @param {UserOfferCreateArgs} args - Arguments to create a UserOffer.
     * @example
     * // Create one UserOffer
     * const UserOffer = await prisma.userOffer.create({
     *   data: {
     *     // ... data to create a UserOffer
     *   }
     * })
     * 
    **/
    create<T extends UserOfferCreateArgs>(
      args: SelectSubset<T, UserOfferCreateArgs>
    ): CheckSelect<T, Prisma__UserOfferClient<UserOffer>, Prisma__UserOfferClient<UserOfferGetPayload<T>>>

    /**
     * Delete a UserOffer.
     * @param {UserOfferDeleteArgs} args - Arguments to delete one UserOffer.
     * @example
     * // Delete one UserOffer
     * const UserOffer = await prisma.userOffer.delete({
     *   where: {
     *     // ... filter to delete one UserOffer
     *   }
     * })
     * 
    **/
    delete<T extends UserOfferDeleteArgs>(
      args: SelectSubset<T, UserOfferDeleteArgs>
    ): CheckSelect<T, Prisma__UserOfferClient<UserOffer>, Prisma__UserOfferClient<UserOfferGetPayload<T>>>

    /**
     * Update one UserOffer.
     * @param {UserOfferUpdateArgs} args - Arguments to update one UserOffer.
     * @example
     * // Update one UserOffer
     * const userOffer = await prisma.userOffer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserOfferUpdateArgs>(
      args: SelectSubset<T, UserOfferUpdateArgs>
    ): CheckSelect<T, Prisma__UserOfferClient<UserOffer>, Prisma__UserOfferClient<UserOfferGetPayload<T>>>

    /**
     * Delete zero or more UserOffers.
     * @param {UserOfferDeleteManyArgs} args - Arguments to filter UserOffers to delete.
     * @example
     * // Delete a few UserOffers
     * const { count } = await prisma.userOffer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserOfferDeleteManyArgs>(
      args?: SelectSubset<T, UserOfferDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserOffers
     * const userOffer = await prisma.userOffer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserOfferUpdateManyArgs>(
      args: SelectSubset<T, UserOfferUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserOffer.
     * @param {UserOfferUpsertArgs} args - Arguments to update or create a UserOffer.
     * @example
     * // Update or create a UserOffer
     * const userOffer = await prisma.userOffer.upsert({
     *   create: {
     *     // ... data to create a UserOffer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserOffer we want to update
     *   }
     * })
    **/
    upsert<T extends UserOfferUpsertArgs>(
      args: SelectSubset<T, UserOfferUpsertArgs>
    ): CheckSelect<T, Prisma__UserOfferClient<UserOffer>, Prisma__UserOfferClient<UserOfferGetPayload<T>>>

    /**
     * Count the number of UserOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferCountArgs} args - Arguments to filter UserOffers to count.
     * @example
     * // Count the number of UserOffers
     * const count = await prisma.userOffer.count({
     *   where: {
     *     // ... the filter for the UserOffers we want to count
     *   }
     * })
    **/
    count<T extends UserOfferCountArgs>(
      args?: Subset<T, UserOfferCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserOfferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserOffer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserOfferAggregateArgs>(args: Subset<T, UserOfferAggregateArgs>): PrismaPromise<GetUserOfferAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for UserOffer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserOfferClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Offer<T extends OfferArgs = {}>(args?: Subset<T, OfferArgs>): CheckSelect<T, Prisma__OfferClient<Offer | null >, Prisma__OfferClient<OfferGetPayload<T> | null >>;

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserOffer findUnique
   */
  export type UserOfferFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserOffer
    **/
    select?: UserOfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferInclude | null
    /**
     * Throw an Error if a UserOffer can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserOffer to fetch.
    **/
    where: UserOfferWhereUniqueInput
  }


  /**
   * UserOffer findFirst
   */
  export type UserOfferFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserOffer
    **/
    select?: UserOfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferInclude | null
    /**
     * Throw an Error if a UserOffer can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserOffer to fetch.
    **/
    where?: UserOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOffers to fetch.
    **/
    orderBy?: Enumerable<UserOfferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserOffers.
    **/
    cursor?: UserOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOffers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOffers.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserOffers.
    **/
    distinct?: Enumerable<UserOfferScalarFieldEnum>
  }


  /**
   * UserOffer findMany
   */
  export type UserOfferFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserOffer
    **/
    select?: UserOfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferInclude | null
    /**
     * Filter, which UserOffers to fetch.
    **/
    where?: UserOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOffers to fetch.
    **/
    orderBy?: Enumerable<UserOfferOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserOffers.
    **/
    cursor?: UserOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOffers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOffers.
    **/
    skip?: number
    distinct?: Enumerable<UserOfferScalarFieldEnum>
  }


  /**
   * UserOffer create
   */
  export type UserOfferCreateArgs = {
    /**
     * Select specific fields to fetch from the UserOffer
    **/
    select?: UserOfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferInclude | null
    /**
     * The data needed to create a UserOffer.
    **/
    data: XOR<UserOfferUncheckedCreateInput, UserOfferCreateInput>
  }


  /**
   * UserOffer update
   */
  export type UserOfferUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserOffer
    **/
    select?: UserOfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferInclude | null
    /**
     * The data needed to update a UserOffer.
    **/
    data: XOR<UserOfferUncheckedUpdateInput, UserOfferUpdateInput>
    /**
     * Choose, which UserOffer to update.
    **/
    where: UserOfferWhereUniqueInput
  }


  /**
   * UserOffer updateMany
   */
  export type UserOfferUpdateManyArgs = {
    data: XOR<UserOfferUncheckedUpdateManyInput, UserOfferUpdateManyMutationInput>
    where?: UserOfferWhereInput
  }


  /**
   * UserOffer upsert
   */
  export type UserOfferUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserOffer
    **/
    select?: UserOfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferInclude | null
    /**
     * The filter to search for the UserOffer to update in case it exists.
    **/
    where: UserOfferWhereUniqueInput
    /**
     * In case the UserOffer found by the `where` argument doesn't exist, create a new UserOffer with this data.
    **/
    create: XOR<UserOfferUncheckedCreateInput, UserOfferCreateInput>
    /**
     * In case the UserOffer was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserOfferUncheckedUpdateInput, UserOfferUpdateInput>
  }


  /**
   * UserOffer delete
   */
  export type UserOfferDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserOffer
    **/
    select?: UserOfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferInclude | null
    /**
     * Filter which UserOffer to delete.
    **/
    where: UserOfferWhereUniqueInput
  }


  /**
   * UserOffer deleteMany
   */
  export type UserOfferDeleteManyArgs = {
    where?: UserOfferWhereInput
  }


  /**
   * UserOffer without action
   */
  export type UserOfferArgs = {
    /**
     * Select specific fields to fetch from the UserOffer
    **/
    select?: UserOfferSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserOfferInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    company: 'company',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserOfferLibraryScalarFieldEnum: {
    offerId: 'offerId',
    userId: 'userId'
  };

  export type UserOfferLibraryScalarFieldEnum = (typeof UserOfferLibraryScalarFieldEnum)[keyof typeof UserOfferLibraryScalarFieldEnum]


  export const OfferScalarFieldEnum: {
    id: 'id',
    title: 'title',
    company: 'company',
    location: 'location',
    type: 'type',
    salary: 'salary',
    description: 'description',
    how_to_apply: 'how_to_apply',
    company_url: 'company_url',
    created_at: 'created_at'
  };

  export type OfferScalarFieldEnum = (typeof OfferScalarFieldEnum)[keyof typeof OfferScalarFieldEnum]


  export const UserOfferScalarFieldEnum: {
    offerId: 'offerId',
    userId: 'userId'
  };

  export type UserOfferScalarFieldEnum = (typeof UserOfferScalarFieldEnum)[keyof typeof UserOfferScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    company?: StringFilter | string
    password?: StringFilter | string
    UserOffer?: UserOfferListRelationFilter
    UserOfferLibrary?: UserOfferLibraryListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    company?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOfferLibraryWhereInput = {
    AND?: Enumerable<UserOfferLibraryWhereInput>
    OR?: Enumerable<UserOfferLibraryWhereInput>
    NOT?: Enumerable<UserOfferLibraryWhereInput>
    offerId?: StringFilter | string
    userId?: IntFilter | number
    User?: XOR<UserWhereInput, UserRelationFilter>
  }

  export type UserOfferLibraryOrderByInput = {
    offerId?: SortOrder
    userId?: SortOrder
    User?: UserOrderByInput
  }

  export type UserOfferLibraryWhereUniqueInput = {
    offerId_userId?: UserOfferLibraryOfferIdUserIdCompoundUniqueInput
  }

  export type OfferWhereInput = {
    AND?: Enumerable<OfferWhereInput>
    OR?: Enumerable<OfferWhereInput>
    NOT?: Enumerable<OfferWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    company?: StringNullableFilter | string | null
    location?: StringFilter | string
    type?: StringNullableFilter | string | null
    salary?: StringFilter | string
    description?: StringFilter | string
    how_to_apply?: StringFilter | string
    company_url?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
    UserOffer?: UserOfferListRelationFilter
  }

  export type OfferOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    company?: SortOrder
    location?: SortOrder
    type?: SortOrder
    salary?: SortOrder
    description?: SortOrder
    how_to_apply?: SortOrder
    company_url?: SortOrder
    created_at?: SortOrder
  }

  export type OfferWhereUniqueInput = {
    id?: number
  }

  export type UserOfferWhereInput = {
    AND?: Enumerable<UserOfferWhereInput>
    OR?: Enumerable<UserOfferWhereInput>
    NOT?: Enumerable<UserOfferWhereInput>
    offerId?: IntFilter | number
    userId?: IntFilter | number
    Offer?: XOR<OfferWhereInput, OfferRelationFilter>
    User?: XOR<UserWhereInput, UserRelationFilter>
  }

  export type UserOfferOrderByInput = {
    offerId?: SortOrder
    userId?: SortOrder
    Offer?: OfferOrderByInput
    User?: UserOrderByInput
  }

  export type UserOfferWhereUniqueInput = {
    offerId_userId?: UserOfferOfferIdUserIdCompoundUniqueInput
  }

  export type UserCreateInput = {
    name: string
    email: string
    company: string
    password: string
    UserOffer?: UserOfferCreateNestedManyWithoutUserInput
    UserOfferLibrary?: UserOfferLibraryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    company: string
    password: string
    UserOffer?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    UserOfferLibrary?: UserOfferLibraryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    UserOffer?: UserOfferUpdateManyWithoutUserInput
    UserOfferLibrary?: UserOfferLibraryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    UserOffer?: UserOfferUncheckedUpdateManyWithoutUserInput
    UserOfferLibrary?: UserOfferLibraryUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserOfferLibraryCreateInput = {
    offerId: string
    User: UserCreateNestedOneWithoutUserOfferLibraryInput
  }

  export type UserOfferLibraryUncheckedCreateInput = {
    offerId: string
    userId: number
  }

  export type UserOfferLibraryUpdateInput = {
    offerId?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutUserOfferLibraryInput
  }

  export type UserOfferLibraryUncheckedUpdateInput = {
    offerId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserOfferLibraryUpdateManyMutationInput = {
    offerId?: StringFieldUpdateOperationsInput | string
  }

  export type UserOfferLibraryUncheckedUpdateManyInput = {
    offerId?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type OfferCreateInput = {
    title: string
    company?: string | null
    location: string
    type?: string | null
    salary: string
    description: string
    how_to_apply: string
    company_url?: string | null
    created_at?: Date | string
    UserOffer?: UserOfferCreateNestedManyWithoutOfferInput
  }

  export type OfferUncheckedCreateInput = {
    id?: number
    title: string
    company?: string | null
    location: string
    type?: string | null
    salary: string
    description: string
    how_to_apply: string
    company_url?: string | null
    created_at?: Date | string
    UserOffer?: UserOfferUncheckedCreateNestedManyWithoutOfferInput
  }

  export type OfferUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    how_to_apply?: StringFieldUpdateOperationsInput | string
    company_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserOffer?: UserOfferUpdateManyWithoutOfferInput
  }

  export type OfferUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    how_to_apply?: StringFieldUpdateOperationsInput | string
    company_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    UserOffer?: UserOfferUncheckedUpdateManyWithoutOfferInput
  }

  export type OfferUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    how_to_apply?: StringFieldUpdateOperationsInput | string
    company_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfferUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    how_to_apply?: StringFieldUpdateOperationsInput | string
    company_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOfferCreateInput = {
    Offer: OfferCreateNestedOneWithoutUserOfferInput
    User: UserCreateNestedOneWithoutUserOfferInput
  }

  export type UserOfferUncheckedCreateInput = {
    offerId: number
    userId: number
  }

  export type UserOfferUpdateInput = {
    Offer?: OfferUpdateOneRequiredWithoutUserOfferInput
    User?: UserUpdateOneRequiredWithoutUserOfferInput
  }

  export type UserOfferUncheckedUpdateInput = {
    offerId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserOfferUpdateManyMutationInput = {

  }

  export type UserOfferUncheckedUpdateManyInput = {
    offerId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserOfferListRelationFilter = {
    every?: UserOfferWhereInput
    some?: UserOfferWhereInput
    none?: UserOfferWhereInput
  }

  export type UserOfferLibraryListRelationFilter = {
    every?: UserOfferLibraryWhereInput
    some?: UserOfferLibraryWhereInput
    none?: UserOfferLibraryWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserOfferLibraryOfferIdUserIdCompoundUniqueInput = {
    offerId: string
    userId: number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type OfferRelationFilter = {
    is?: OfferWhereInput
    isNot?: OfferWhereInput
  }

  export type UserOfferOfferIdUserIdCompoundUniqueInput = {
    offerId: number
    userId: number
  }

  export type UserOfferCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserOfferUncheckedCreateWithoutUserInput>, Enumerable<UserOfferCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserOfferCreateOrConnectWithoutUserInput>
    connect?: Enumerable<UserOfferWhereUniqueInput>
  }

  export type UserOfferLibraryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserOfferLibraryUncheckedCreateWithoutUserInput>, Enumerable<UserOfferLibraryCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserOfferLibraryCreateOrConnectWithoutUserInput>
    connect?: Enumerable<UserOfferLibraryWhereUniqueInput>
  }

  export type UserOfferUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserOfferUncheckedCreateWithoutUserInput>, Enumerable<UserOfferCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserOfferCreateOrConnectWithoutUserInput>
    connect?: Enumerable<UserOfferWhereUniqueInput>
  }

  export type UserOfferLibraryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserOfferLibraryUncheckedCreateWithoutUserInput>, Enumerable<UserOfferLibraryCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserOfferLibraryCreateOrConnectWithoutUserInput>
    connect?: Enumerable<UserOfferLibraryWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserOfferUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserOfferUncheckedCreateWithoutUserInput>, Enumerable<UserOfferCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserOfferCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserOfferUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<UserOfferWhereUniqueInput>
    set?: Enumerable<UserOfferWhereUniqueInput>
    disconnect?: Enumerable<UserOfferWhereUniqueInput>
    delete?: Enumerable<UserOfferWhereUniqueInput>
    update?: Enumerable<UserOfferUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserOfferUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserOfferScalarWhereInput>
  }

  export type UserOfferLibraryUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserOfferLibraryUncheckedCreateWithoutUserInput>, Enumerable<UserOfferLibraryCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserOfferLibraryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserOfferLibraryUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<UserOfferLibraryWhereUniqueInput>
    set?: Enumerable<UserOfferLibraryWhereUniqueInput>
    disconnect?: Enumerable<UserOfferLibraryWhereUniqueInput>
    delete?: Enumerable<UserOfferLibraryWhereUniqueInput>
    update?: Enumerable<UserOfferLibraryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserOfferLibraryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserOfferLibraryScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserOfferUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserOfferUncheckedCreateWithoutUserInput>, Enumerable<UserOfferCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserOfferCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserOfferUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<UserOfferWhereUniqueInput>
    set?: Enumerable<UserOfferWhereUniqueInput>
    disconnect?: Enumerable<UserOfferWhereUniqueInput>
    delete?: Enumerable<UserOfferWhereUniqueInput>
    update?: Enumerable<UserOfferUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserOfferUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserOfferScalarWhereInput>
  }

  export type UserOfferLibraryUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserOfferLibraryUncheckedCreateWithoutUserInput>, Enumerable<UserOfferLibraryCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserOfferLibraryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserOfferLibraryUpsertWithWhereUniqueWithoutUserInput>
    connect?: Enumerable<UserOfferLibraryWhereUniqueInput>
    set?: Enumerable<UserOfferLibraryWhereUniqueInput>
    disconnect?: Enumerable<UserOfferLibraryWhereUniqueInput>
    delete?: Enumerable<UserOfferLibraryWhereUniqueInput>
    update?: Enumerable<UserOfferLibraryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserOfferLibraryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserOfferLibraryScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserOfferLibraryInput = {
    create?: XOR<UserUncheckedCreateWithoutUserOfferLibraryInput, UserCreateWithoutUserOfferLibraryInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserOfferLibraryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserOfferLibraryInput = {
    create?: XOR<UserUncheckedCreateWithoutUserOfferLibraryInput, UserCreateWithoutUserOfferLibraryInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserOfferLibraryInput
    upsert?: UserUpsertWithoutUserOfferLibraryInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUncheckedUpdateWithoutUserOfferLibraryInput, UserUpdateWithoutUserOfferLibraryInput>
  }

  export type UserOfferCreateNestedManyWithoutOfferInput = {
    create?: XOR<Enumerable<UserOfferUncheckedCreateWithoutOfferInput>, Enumerable<UserOfferCreateWithoutOfferInput>>
    connectOrCreate?: Enumerable<UserOfferCreateOrConnectWithoutOfferInput>
    connect?: Enumerable<UserOfferWhereUniqueInput>
  }

  export type UserOfferUncheckedCreateNestedManyWithoutOfferInput = {
    create?: XOR<Enumerable<UserOfferUncheckedCreateWithoutOfferInput>, Enumerable<UserOfferCreateWithoutOfferInput>>
    connectOrCreate?: Enumerable<UserOfferCreateOrConnectWithoutOfferInput>
    connect?: Enumerable<UserOfferWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserOfferUpdateManyWithoutOfferInput = {
    create?: XOR<Enumerable<UserOfferUncheckedCreateWithoutOfferInput>, Enumerable<UserOfferCreateWithoutOfferInput>>
    connectOrCreate?: Enumerable<UserOfferCreateOrConnectWithoutOfferInput>
    upsert?: Enumerable<UserOfferUpsertWithWhereUniqueWithoutOfferInput>
    connect?: Enumerable<UserOfferWhereUniqueInput>
    set?: Enumerable<UserOfferWhereUniqueInput>
    disconnect?: Enumerable<UserOfferWhereUniqueInput>
    delete?: Enumerable<UserOfferWhereUniqueInput>
    update?: Enumerable<UserOfferUpdateWithWhereUniqueWithoutOfferInput>
    updateMany?: Enumerable<UserOfferUpdateManyWithWhereWithoutOfferInput>
    deleteMany?: Enumerable<UserOfferScalarWhereInput>
  }

  export type UserOfferUncheckedUpdateManyWithoutOfferInput = {
    create?: XOR<Enumerable<UserOfferUncheckedCreateWithoutOfferInput>, Enumerable<UserOfferCreateWithoutOfferInput>>
    connectOrCreate?: Enumerable<UserOfferCreateOrConnectWithoutOfferInput>
    upsert?: Enumerable<UserOfferUpsertWithWhereUniqueWithoutOfferInput>
    connect?: Enumerable<UserOfferWhereUniqueInput>
    set?: Enumerable<UserOfferWhereUniqueInput>
    disconnect?: Enumerable<UserOfferWhereUniqueInput>
    delete?: Enumerable<UserOfferWhereUniqueInput>
    update?: Enumerable<UserOfferUpdateWithWhereUniqueWithoutOfferInput>
    updateMany?: Enumerable<UserOfferUpdateManyWithWhereWithoutOfferInput>
    deleteMany?: Enumerable<UserOfferScalarWhereInput>
  }

  export type OfferCreateNestedOneWithoutUserOfferInput = {
    create?: XOR<OfferUncheckedCreateWithoutUserOfferInput, OfferCreateWithoutUserOfferInput>
    connectOrCreate?: OfferCreateOrConnectWithoutUserOfferInput
    connect?: OfferWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserOfferInput = {
    create?: XOR<UserUncheckedCreateWithoutUserOfferInput, UserCreateWithoutUserOfferInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserOfferInput
    connect?: UserWhereUniqueInput
  }

  export type OfferUpdateOneRequiredWithoutUserOfferInput = {
    create?: XOR<OfferUncheckedCreateWithoutUserOfferInput, OfferCreateWithoutUserOfferInput>
    connectOrCreate?: OfferCreateOrConnectWithoutUserOfferInput
    upsert?: OfferUpsertWithoutUserOfferInput
    connect?: OfferWhereUniqueInput
    update?: XOR<OfferUncheckedUpdateWithoutUserOfferInput, OfferUpdateWithoutUserOfferInput>
  }

  export type UserUpdateOneRequiredWithoutUserOfferInput = {
    create?: XOR<UserUncheckedCreateWithoutUserOfferInput, UserCreateWithoutUserOfferInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserOfferInput
    upsert?: UserUpsertWithoutUserOfferInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUncheckedUpdateWithoutUserOfferInput, UserUpdateWithoutUserOfferInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserOfferCreateWithoutUserInput = {
    Offer: OfferCreateNestedOneWithoutUserOfferInput
  }

  export type UserOfferUncheckedCreateWithoutUserInput = {
    offerId: number
  }

  export type UserOfferCreateOrConnectWithoutUserInput = {
    where: UserOfferWhereUniqueInput
    create: XOR<UserOfferUncheckedCreateWithoutUserInput, UserOfferCreateWithoutUserInput>
  }

  export type UserOfferLibraryCreateWithoutUserInput = {
    offerId: string
  }

  export type UserOfferLibraryUncheckedCreateWithoutUserInput = {
    offerId: string
  }

  export type UserOfferLibraryCreateOrConnectWithoutUserInput = {
    where: UserOfferLibraryWhereUniqueInput
    create: XOR<UserOfferLibraryUncheckedCreateWithoutUserInput, UserOfferLibraryCreateWithoutUserInput>
  }

  export type UserOfferUpsertWithWhereUniqueWithoutUserInput = {
    where: UserOfferWhereUniqueInput
    update: XOR<UserOfferUncheckedUpdateWithoutUserInput, UserOfferUpdateWithoutUserInput>
    create: XOR<UserOfferUncheckedCreateWithoutUserInput, UserOfferCreateWithoutUserInput>
  }

  export type UserOfferUpdateWithWhereUniqueWithoutUserInput = {
    where: UserOfferWhereUniqueInput
    data: XOR<UserOfferUncheckedUpdateWithoutUserInput, UserOfferUpdateWithoutUserInput>
  }

  export type UserOfferUpdateManyWithWhereWithoutUserInput = {
    where: UserOfferScalarWhereInput
    data: XOR<UserOfferUncheckedUpdateManyWithoutUserOfferInput, UserOfferUpdateManyMutationInput>
  }

  export type UserOfferScalarWhereInput = {
    AND?: Enumerable<UserOfferScalarWhereInput>
    OR?: Enumerable<UserOfferScalarWhereInput>
    NOT?: Enumerable<UserOfferScalarWhereInput>
    offerId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type UserOfferLibraryUpsertWithWhereUniqueWithoutUserInput = {
    where: UserOfferLibraryWhereUniqueInput
    update: XOR<UserOfferLibraryUncheckedUpdateWithoutUserInput, UserOfferLibraryUpdateWithoutUserInput>
    create: XOR<UserOfferLibraryUncheckedCreateWithoutUserInput, UserOfferLibraryCreateWithoutUserInput>
  }

  export type UserOfferLibraryUpdateWithWhereUniqueWithoutUserInput = {
    where: UserOfferLibraryWhereUniqueInput
    data: XOR<UserOfferLibraryUncheckedUpdateWithoutUserInput, UserOfferLibraryUpdateWithoutUserInput>
  }

  export type UserOfferLibraryUpdateManyWithWhereWithoutUserInput = {
    where: UserOfferLibraryScalarWhereInput
    data: XOR<UserOfferLibraryUncheckedUpdateManyWithoutUserOfferLibraryInput, UserOfferLibraryUpdateManyMutationInput>
  }

  export type UserOfferLibraryScalarWhereInput = {
    AND?: Enumerable<UserOfferLibraryScalarWhereInput>
    OR?: Enumerable<UserOfferLibraryScalarWhereInput>
    NOT?: Enumerable<UserOfferLibraryScalarWhereInput>
    offerId?: StringFilter | string
    userId?: IntFilter | number
  }

  export type UserCreateWithoutUserOfferLibraryInput = {
    name: string
    email: string
    company: string
    password: string
    UserOffer?: UserOfferCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserOfferLibraryInput = {
    id?: number
    name: string
    email: string
    company: string
    password: string
    UserOffer?: UserOfferUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserOfferLibraryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutUserOfferLibraryInput, UserCreateWithoutUserOfferLibraryInput>
  }

  export type UserUpsertWithoutUserOfferLibraryInput = {
    update: XOR<UserUncheckedUpdateWithoutUserOfferLibraryInput, UserUpdateWithoutUserOfferLibraryInput>
    create: XOR<UserUncheckedCreateWithoutUserOfferLibraryInput, UserCreateWithoutUserOfferLibraryInput>
  }

  export type UserUpdateWithoutUserOfferLibraryInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    UserOffer?: UserOfferUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUserOfferLibraryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    UserOffer?: UserOfferUncheckedUpdateManyWithoutUserInput
  }

  export type UserOfferCreateWithoutOfferInput = {
    User: UserCreateNestedOneWithoutUserOfferInput
  }

  export type UserOfferUncheckedCreateWithoutOfferInput = {
    userId: number
  }

  export type UserOfferCreateOrConnectWithoutOfferInput = {
    where: UserOfferWhereUniqueInput
    create: XOR<UserOfferUncheckedCreateWithoutOfferInput, UserOfferCreateWithoutOfferInput>
  }

  export type UserOfferUpsertWithWhereUniqueWithoutOfferInput = {
    where: UserOfferWhereUniqueInput
    update: XOR<UserOfferUncheckedUpdateWithoutOfferInput, UserOfferUpdateWithoutOfferInput>
    create: XOR<UserOfferUncheckedCreateWithoutOfferInput, UserOfferCreateWithoutOfferInput>
  }

  export type UserOfferUpdateWithWhereUniqueWithoutOfferInput = {
    where: UserOfferWhereUniqueInput
    data: XOR<UserOfferUncheckedUpdateWithoutOfferInput, UserOfferUpdateWithoutOfferInput>
  }

  export type UserOfferUpdateManyWithWhereWithoutOfferInput = {
    where: UserOfferScalarWhereInput
    data: XOR<UserOfferUncheckedUpdateManyWithoutUserOfferInput, UserOfferUpdateManyMutationInput>
  }

  export type OfferCreateWithoutUserOfferInput = {
    title: string
    company?: string | null
    location: string
    type?: string | null
    salary: string
    description: string
    how_to_apply: string
    company_url?: string | null
    created_at?: Date | string
  }

  export type OfferUncheckedCreateWithoutUserOfferInput = {
    id?: number
    title: string
    company?: string | null
    location: string
    type?: string | null
    salary: string
    description: string
    how_to_apply: string
    company_url?: string | null
    created_at?: Date | string
  }

  export type OfferCreateOrConnectWithoutUserOfferInput = {
    where: OfferWhereUniqueInput
    create: XOR<OfferUncheckedCreateWithoutUserOfferInput, OfferCreateWithoutUserOfferInput>
  }

  export type UserCreateWithoutUserOfferInput = {
    name: string
    email: string
    company: string
    password: string
    UserOfferLibrary?: UserOfferLibraryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserOfferInput = {
    id?: number
    name: string
    email: string
    company: string
    password: string
    UserOfferLibrary?: UserOfferLibraryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserOfferInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutUserOfferInput, UserCreateWithoutUserOfferInput>
  }

  export type OfferUpsertWithoutUserOfferInput = {
    update: XOR<OfferUncheckedUpdateWithoutUserOfferInput, OfferUpdateWithoutUserOfferInput>
    create: XOR<OfferUncheckedCreateWithoutUserOfferInput, OfferCreateWithoutUserOfferInput>
  }

  export type OfferUpdateWithoutUserOfferInput = {
    title?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    how_to_apply?: StringFieldUpdateOperationsInput | string
    company_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfferUncheckedUpdateWithoutUserOfferInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    location?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    how_to_apply?: StringFieldUpdateOperationsInput | string
    company_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutUserOfferInput = {
    update: XOR<UserUncheckedUpdateWithoutUserOfferInput, UserUpdateWithoutUserOfferInput>
    create: XOR<UserUncheckedCreateWithoutUserOfferInput, UserCreateWithoutUserOfferInput>
  }

  export type UserUpdateWithoutUserOfferInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    UserOfferLibrary?: UserOfferLibraryUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUserOfferInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    UserOfferLibrary?: UserOfferLibraryUncheckedUpdateManyWithoutUserInput
  }

  export type UserOfferUpdateWithoutUserInput = {
    Offer?: OfferUpdateOneRequiredWithoutUserOfferInput
  }

  export type UserOfferUncheckedUpdateWithoutUserInput = {
    offerId?: IntFieldUpdateOperationsInput | number
  }

  export type UserOfferUncheckedUpdateManyWithoutUserOfferInput = {
    offerId?: IntFieldUpdateOperationsInput | number
  }

  export type UserOfferLibraryUpdateWithoutUserInput = {
    offerId?: StringFieldUpdateOperationsInput | string
  }

  export type UserOfferLibraryUncheckedUpdateWithoutUserInput = {
    offerId?: StringFieldUpdateOperationsInput | string
  }

  export type UserOfferLibraryUncheckedUpdateManyWithoutUserOfferLibraryInput = {
    offerId?: StringFieldUpdateOperationsInput | string
  }

  export type UserOfferUpdateWithoutOfferInput = {
    User?: UserUpdateOneRequiredWithoutUserOfferInput
  }

  export type UserOfferUncheckedUpdateWithoutOfferInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}